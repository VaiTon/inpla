// Quick sort
qsort(ret) >< [] => ret~(*R)[];
qsort(ret) >< (int x):xs =>
	(*R)part(x, left, right)~xs,
	(*L)qsort(cntl)~left, qsort(cntr)~right,
	Append(ret, x:cntl)~cntr;


// Note: `Append' is implemented as built-in.


part(int x, a, b) >< [] => a~(*L)[], b~(*R)[];
part(int x, a, b) >< (int y):ys
| y<x => b~(*R)(y:cnt), (*L)part(x, a, cnt)~ys
| _   => a~(*R)(y:cnt), (*L)part(x, cnt, b)~ys;
//| y<x => (*L)part(x, a, cnt)~ys, b~(*R)(y:cnt)  // quite BAD!
//| _   => (*L)part(x, cnt, b)~ys, a~(*R)(y:cnt); // quite BAD!




// creates a random list
make_RandList(ret) >< (int n)
| n>0 => ret~(rd:cnt), (*L)make_RandList(cnt)~(n-1) 
  where rd=rand(10000)
| _ => ret~[];


// validation checks
valid(ret) >< [] => ret~True;
valid(ret) >< x:xs => (*L)valid_Cons(ret,x)~xs;

valid_Cons(ret, int x) >< [] => ret~True;
valid_Cons(ret, int x) >< (int y):ys
| x<=y => (*L)valid_Cons(ret,y)~ys
| _ => ret~False, Eraser~ys;

// The `Eraser' is a built-in agent defined for any agents as follows:
//Eraser >< Alpha(a1, ..., a5) => Eraser~a1, ..., Eraser~a5;


// Main
const LIST_ELEM=260000;

make_RandList(rndlist)~(LIST_ELEM),
qsort(sorted)~rndlist,
valid(ret)~sorted;

ret;
