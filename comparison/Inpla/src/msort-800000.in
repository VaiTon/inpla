// Merge sort
MS(ret) >< [] => ret~[];
MS(ret) >< x:xs => MS_tail(ret, x)~xs;

MS_tail(ret, int n) >< [] => ret~[n];
MS_tail(ret, int n) >< x:xs => 
	Split(left,right) ~ (n:x:xs),
	MS(a)~left, MS(b)~right, Merge(ret,b)~a;

Merge(ret, snd) >< [] => ret~snd;
Merge(ret, snd) >< x:xs => MergeCC(ret, x, xs)~snd;

MergeCC(ret, int y, ys) >< [] => ret~(y:ys);
MergeCC(ret, int y, ys) >< (int x):xs
| x <= y => ret~(x:cnt), MergeCC(cnt, y, ys) ~ xs
| _      => ret~(y:cnt), MergeCC(cnt, x, xs) ~ ys;


Split(right,left) >< [] => right~[], left~[];
Split(right,left) >< x:xs =>
	right~(x:cntl), left~cntr, Split(cntr,cntl)~xs;



const LIST_ELEM=800000;

MkRandList(ret) >< (int n)
| n>0 => ret~(rd:cnt), MkRandList(cnt)~(n-1) 
  where rd=rand(10000)
| _ => ret~[];

MkRandList(cnt)~(LIST_ELEM),
MS(ret)~cnt;
ret;
