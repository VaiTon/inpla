// Quick sort
qsort(ret) >< [] => ret~[];
qsort(ret) >< (int x):xs =>
	part(x, left, right)~xs,
	qsort(cntl)~left, qsort(cntr)~right,
	Append(ret, x:cntl)~cntr;

// Note: `Append' is implemented as built-in.


part(int x, a, b) >< [] => a~[], b~[];
part(int x, a, b) >< (int y):ys
| y<x => b~(y:cnt), part(x, a, cnt)~ys
| _   => a~(y:cnt), part(x, cnt, b)~ys;


// creates a random list
make_RandList(ret) >< (int n)
| n>0 => ret~(rd:cnt), make_RandList(cnt)~(n-1) 
  where rd=rand(10000)
| _ => ret~[];


// validation checks
valid(ret) >< [] => ret~True;
valid(ret) >< x:xs => valid_Cons(ret,x)~xs;

valid_Cons(ret, int x) >< [] => ret~True;
valid_Cons(ret, int x) >< (int y):ys
| x<=y => valid_Cons(ret,y)~ys
| _ => ret~False, Eraser~ys;

// The `Eraser' is a built-in agent defined for any agents as follows:
//Eraser >< Alpha(a1, ..., a5) => Eraser~a1, ..., Eraser~a5;


// Main
const LIST_ELEM=260000;

make_RandList(rndlist)~(LIST_ELEM),
qsort(sorted)~rndlist,
valid(ret)~sorted;

ret;
